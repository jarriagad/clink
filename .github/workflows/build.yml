name: Build and Upload Rust Binary

on: [push, pull_request]

jobs:
  release:
    permissions:
      contents: write

    name: Release - ${{ matrix.platform.os_name }}
    if: startsWith( github.ref, 'refs/tags/v' ) || startsWith( github.ref, 'refs/tags/test-release' )
    strategy:
      matrix:
        platform:
          - os_name: Linux-x86_64
            os: ubuntu-20.04
            target: x86_64-unknown-linux-gnu
            bin: clink
            name: clink-Linux-x86_64-gnu.tar.gz
            cross: false
            cargo_command: cargo

          - os_name: macOS-x86_64
            os: macOS-latest
            target: aarch64-apple-darwin
            bin: clink
            name: clink-Darwin-aarch64.tar.gz
            cross: false
            cargo_command: cargo

    runs-on: ${{ matrix.platform.os }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
        targets: ${{ matrix.platform.target }}
      if: ${{ !matrix.platform.cross }}
    
    - name: Install musl-tools on Linux
      run: sudo apt-get update --yes && sudo apt-get install --yes musl-tools libx11-dev libxi-dev libxtst-dev libxdo-dev && rustup target add x86_64-unknown-linux-musl
      if: contains(matrix.platform.os, 'ubuntu') && !matrix.platform.cross

    - name: Install cross if cross-compiling (*nix)
      id: cross-nix
      shell: bash
      run: |
        set -e
        export TARGET="$HOME/bin"
        mkdir -p "$TARGET"
        ./bootstrap/bootstrap-ubi.sh
        "$HOME/bin/ubi" --project cross-rs/cross --matching musl --in .          
      if: matrix.platform.cross && !contains(matrix.platform.os, 'windows')

    - name: Build binary (*nix)
      shell: bash
      run: |
        ${{ matrix.platform.cargo_command }} build --release --target ${{ matrix.platform.target }}
      if: ${{ !contains(matrix.platform.os, 'windows') }}

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: Release ${{ github.ref_name }}
        draft: false
        prerelease: false

    # Add this step to upload the compiled binary to the GitHub release
    - name: Upload Release Asset
      id: upload-release-asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./target/${{ matrix.platform.target }}/release/${{ matrix.platform.bin }}
        asset_name: ${{ matrix.platform.bin }}
        asset_content_type: application/octet-stream